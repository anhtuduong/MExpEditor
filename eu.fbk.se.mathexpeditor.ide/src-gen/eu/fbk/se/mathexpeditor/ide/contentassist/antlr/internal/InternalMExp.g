/*
 * generated by Xtext 2.27.0
 */
grammar InternalMExp;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package eu.fbk.se.mathexpeditor.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package eu.fbk.se.mathexpeditor.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import eu.fbk.se.mathexpeditor.services.MExpGrammarAccess;

}
@parser::members {
	private MExpGrammarAccess grammarAccess;

	public void setGrammarAccess(MExpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstDefinition
entryRuleConstDefinition
:
{ before(grammarAccess.getConstDefinitionRule()); }
	 ruleConstDefinition
{ after(grammarAccess.getConstDefinitionRule()); } 
	 EOF 
;

// Rule ConstDefinition
ruleConstDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstDefinitionAccess().getGroup()); }
		(rule__ConstDefinition__Group__0)
		{ after(grammarAccess.getConstDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDefinition
entryRuleVarDefinition
:
{ before(grammarAccess.getVarDefinitionRule()); }
	 ruleVarDefinition
{ after(grammarAccess.getVarDefinitionRule()); } 
	 EOF 
;

// Rule VarDefinition
ruleVarDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDefinitionAccess().getGroup()); }
		(rule__VarDefinition__Group__0)
		{ after(grammarAccess.getVarDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpDefinition
entryRuleExpDefinition
:
{ before(grammarAccess.getExpDefinitionRule()); }
	 ruleExpDefinition
{ after(grammarAccess.getExpDefinitionRule()); } 
	 EOF 
;

// Rule ExpDefinition
ruleExpDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpDefinitionAccess().getGroup()); }
		(rule__ExpDefinition__Group__0)
		{ after(grammarAccess.getExpDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMathExpression
entryRuleMathExpression
:
{ before(grammarAccess.getMathExpressionRule()); }
	 ruleMathExpression
{ after(grammarAccess.getMathExpressionRule()); } 
	 EOF 
;

// Rule MathExpression
ruleMathExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathExpressionAccess().getAlternatives()); }
		(rule__MathExpression__Alternatives)
		{ after(grammarAccess.getMathExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getGroup_0()); }
		(rule__MathExpression__Group_0__0)
		{ after(grammarAccess.getMathExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathExpressionAccess().getVarAssignment_1()); }
		(rule__MathExpression__VarAssignment_1)
		{ after(grammarAccess.getMathExpressionAccess().getVarAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getMathExpressionAccess().getGroup_2()); }
		(rule__MathExpression__Group_2__0)
		{ after(grammarAccess.getMathExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getMathExpressionAccess().getGroup_3()); }
		(rule__MathExpression__Group_3__0)
		{ after(grammarAccess.getMathExpressionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getVarAssignment_2_0_0()); }
		(rule__MathExpression__VarAssignment_2_0_0)
		{ after(grammarAccess.getMathExpressionAccess().getVarAssignment_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathExpressionAccess().getConstAssignment_2_0_1()); }
		(rule__MathExpression__ConstAssignment_2_0_1)
		{ after(grammarAccess.getMathExpressionAccess().getConstAssignment_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getConstDefinitionsAssignment_0()); }
	(rule__Model__ConstDefinitionsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getConstDefinitionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVarDefinitionsAssignment_1()); }
	(rule__Model__VarDefinitionsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getVarDefinitionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getExpDefinitionsAssignment_2()); }
	(rule__Model__ExpDefinitionsAssignment_2)*
	{ after(grammarAccess.getModelAccess().getExpDefinitionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDefinition__Group__0__Impl
	rule__ConstDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDefinitionAccess().getConstKeyword_0()); }
	'Const'
	{ after(grammarAccess.getConstDefinitionAccess().getConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDefinition__Group__1__Impl
	rule__ConstDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDefinitionAccess().getVarNameAssignment_1()); }
	(rule__ConstDefinition__VarNameAssignment_1)
	{ after(grammarAccess.getConstDefinitionAccess().getVarNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDefinition__Group__2__Impl
	rule__ConstDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDefinitionAccess().getCOLONTerminalRuleCall_2()); }
	RULE_COLON
	{ after(grammarAccess.getConstDefinitionAccess().getCOLONTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDefinition__Group__3__Impl
	rule__ConstDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDefinitionAccess().getVarValueAssignment_3()); }
	(rule__ConstDefinition__VarValueAssignment_3)
	{ after(grammarAccess.getConstDefinitionAccess().getVarValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDefinitionAccess().getSEMICOLONTerminalRuleCall_4()); }
	RULE_SEMICOLON
	{ after(grammarAccess.getConstDefinitionAccess().getSEMICOLONTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDefinition__Group__0__Impl
	rule__VarDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDefinitionAccess().getVarKeyword_0()); }
	'Var'
	{ after(grammarAccess.getVarDefinitionAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDefinition__Group__1__Impl
	rule__VarDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDefinitionAccess().getVarNameAssignment_1()); }
	(rule__VarDefinition__VarNameAssignment_1)
	{ after(grammarAccess.getVarDefinitionAccess().getVarNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDefinition__Group__2__Impl
	rule__VarDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDefinitionAccess().getCOLONTerminalRuleCall_2()); }
	RULE_COLON
	{ after(grammarAccess.getVarDefinitionAccess().getCOLONTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDefinition__Group__3__Impl
	rule__VarDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDefinitionAccess().getVarValueAssignment_3()); }
	(rule__VarDefinition__VarValueAssignment_3)
	{ after(grammarAccess.getVarDefinitionAccess().getVarValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDefinitionAccess().getSEMICOLONTerminalRuleCall_4()); }
	RULE_SEMICOLON
	{ after(grammarAccess.getVarDefinitionAccess().getSEMICOLONTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpDefinition__Group__0__Impl
	rule__ExpDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpDefinitionAccess().getExpKeyword_0()); }
	'Exp'
	{ after(grammarAccess.getExpDefinitionAccess().getExpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpDefinition__Group__1__Impl
	rule__ExpDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpDefinitionAccess().getVarNameAssignment_1()); }
	(rule__ExpDefinition__VarNameAssignment_1)
	{ after(grammarAccess.getExpDefinitionAccess().getVarNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpDefinition__Group__2__Impl
	rule__ExpDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpDefinitionAccess().getCOLONTerminalRuleCall_2()); }
	RULE_COLON
	{ after(grammarAccess.getExpDefinitionAccess().getCOLONTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpDefinition__Group__3__Impl
	rule__ExpDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpDefinitionAccess().getVarValueAssignment_3()); }
	(rule__ExpDefinition__VarValueAssignment_3)
	{ after(grammarAccess.getExpDefinitionAccess().getVarValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpDefinitionAccess().getSEMICOLONTerminalRuleCall_4()); }
	RULE_SEMICOLON
	{ after(grammarAccess.getExpDefinitionAccess().getSEMICOLONTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MathExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_0__0__Impl
	rule__MathExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getMathExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getMathExpressionAccess().getMathExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getConstAssignment_0_1()); }
	(rule__MathExpression__ConstAssignment_0_1)
	{ after(grammarAccess.getMathExpressionAccess().getConstAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MathExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_2__0__Impl
	rule__MathExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getAlternatives_2_0()); }
	(rule__MathExpression__Alternatives_2_0)
	{ after(grammarAccess.getMathExpressionAccess().getAlternatives_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_2__1__Impl
	rule__MathExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getOPERATORTerminalRuleCall_2_1()); }
	RULE_OPERATOR
	{ after(grammarAccess.getMathExpressionAccess().getOPERATORTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getExp1Assignment_2_2()); }
	(rule__MathExpression__Exp1Assignment_2_2)
	{ after(grammarAccess.getMathExpressionAccess().getExp1Assignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MathExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_3__0__Impl
	rule__MathExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getL_BRACKETTerminalRuleCall_3_0()); }
	RULE_L_BRACKET
	{ after(grammarAccess.getMathExpressionAccess().getL_BRACKETTerminalRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_3__1__Impl
	rule__MathExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getExp2Assignment_3_1()); }
	(rule__MathExpression__Exp2Assignment_3_1)
	{ after(grammarAccess.getMathExpressionAccess().getExp2Assignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MathExpression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMathExpressionAccess().getR_BRACKETTerminalRuleCall_3_2()); }
	RULE_R_BRACKET
	{ after(grammarAccess.getMathExpressionAccess().getR_BRACKETTerminalRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ConstDefinitionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getConstDefinitionsConstDefinitionParserRuleCall_0_0()); }
		ruleConstDefinition
		{ after(grammarAccess.getModelAccess().getConstDefinitionsConstDefinitionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VarDefinitionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVarDefinitionsVarDefinitionParserRuleCall_1_0()); }
		ruleVarDefinition
		{ after(grammarAccess.getModelAccess().getVarDefinitionsVarDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ExpDefinitionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getExpDefinitionsExpDefinitionParserRuleCall_2_0()); }
		ruleExpDefinition
		{ after(grammarAccess.getModelAccess().getExpDefinitionsExpDefinitionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__VarNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstDefinitionAccess().getVarNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstDefinitionAccess().getVarNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDefinition__VarValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstDefinitionAccess().getVarValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getConstDefinitionAccess().getVarValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__VarNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDefinitionAccess().getVarNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDefinitionAccess().getVarNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDefinition__VarValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDefinitionAccess().getVarValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVarDefinitionAccess().getVarValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__VarNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpDefinitionAccess().getVarNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExpDefinitionAccess().getVarNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpDefinition__VarValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpDefinitionAccess().getVarValueMathExpressionParserRuleCall_3_0()); }
		ruleMathExpression
		{ after(grammarAccess.getExpDefinitionAccess().getVarValueMathExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__ConstAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getConstINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMathExpressionAccess().getConstINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getVarIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMathExpressionAccess().getVarIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__VarAssignment_2_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getVarIDTerminalRuleCall_2_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getMathExpressionAccess().getVarIDTerminalRuleCall_2_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__ConstAssignment_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getConstINTTerminalRuleCall_2_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getMathExpressionAccess().getConstINTTerminalRuleCall_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Exp1Assignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getExp1MathExpressionParserRuleCall_2_2_0()); }
		ruleMathExpression
		{ after(grammarAccess.getMathExpressionAccess().getExp1MathExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathExpression__Exp2Assignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathExpressionAccess().getExp2MathExpressionParserRuleCall_3_1_0()); }
		ruleMathExpression
		{ after(grammarAccess.getMathExpressionAccess().getExp2MathExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_OPERATOR : ('+'|'-'|'*');

RULE_EQUAL : '=';

RULE_ASSIGN : ':=';

RULE_SEMICOLON : ';';

RULE_COLON : ':';

RULE_L_BRACKET : '(';

RULE_R_BRACKET : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
