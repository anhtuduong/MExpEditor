/**
 * generated by Xtext 2.27.0.M3
 */
package eu.fbk.se.mathexpeditor.tests;

import com.google.inject.Inject;
import eu.fbk.se.mathexpeditor.mExp.MExpPackage;
import eu.fbk.se.mathexpeditor.mExp.Model;
import eu.fbk.se.mathexpeditor.validation.MExpValidator;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MExpInjectorProvider.class)
@SuppressWarnings("all")
public class MExpValidationTest {
  @Inject
  private ParseHelper<Model> parseHelper;

  private ValidationTestHelper validationTestHelper;

  @Test
  public void testDuplicatedNames() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Const x : 10;");
      _builder.newLine();
      _builder.append("Const x : 10;");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      this.validationTestHelper.assertError(result, MExpPackage.Literals.CONST_DEFINITION, "Names must be unique", MExpValidator.DUPLICATED_VAR_NAME);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
