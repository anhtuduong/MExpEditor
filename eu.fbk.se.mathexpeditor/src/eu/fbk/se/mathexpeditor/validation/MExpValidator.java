/*
 * generated by Xtext 2.27.0.M3
 */
package eu.fbk.se.mathexpeditor.validation;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;

import eu.fbk.se.mathexpeditor.mExp.ConstDefinition;
import eu.fbk.se.mathexpeditor.mExp.ExpDefinition;
import eu.fbk.se.mathexpeditor.mExp.MExpPackage;
import eu.fbk.se.mathexpeditor.mExp.MathExpression;
import eu.fbk.se.mathexpeditor.mExp.Model;
import eu.fbk.se.mathexpeditor.mExp.VarDefinition;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MExpValidator extends AbstractMExpValidator {
	
	public static final String DUPLICATED_VAR_NAME = "Names must be unique";
	public static final String UNDEFINED_NAME = "Names must be first defined";


	@Check
	public void checkNamesAreUnique(Model root) {
		Set<String> definedNames = new HashSet<String>();
		EList<ConstDefinition> constDefinitions = root.getConstDefinitions();
		for (ConstDefinition constDef : constDefinitions) {
			String varName = constDef.getVarName();
			if (varName != null && !varName.isBlank()) {
				boolean newVar = definedNames.add(varName);
				if (!newVar) {
					error(DUPLICATED_VAR_NAME, constDef, MExpPackage.Literals.CONST_DEFINITION__VAR_NAME);
				}
			}
		}
		
		EList<VarDefinition> varDefinitions = root.getVarDefinitions();
		for (VarDefinition varDef : varDefinitions) {
			String varName = varDef.getVarName();
			if (varName != null && !varName.isBlank()) {
				boolean newVar = definedNames.add(varName);
				if (!newVar) {
					error(DUPLICATED_VAR_NAME, varDef, MExpPackage.Literals.VAR_DEFINITION__VAR_NAME);
				}
			}
		}
		
		EList<ExpDefinition> expDefinitions = root.getExpDefinitions();
		for (ExpDefinition expDef : expDefinitions) {
			String varName = expDef.getVarName();
			if (varName != null && !varName.isBlank()) {
				boolean newVar = definedNames.add(varName);
				if (!newVar) {
					error(DUPLICATED_VAR_NAME, expDef, MExpPackage.Literals.EXP_DEFINITION__VAR_NAME);
				}
			}
		}
	}
	
	@Check
	public void checkUndeclaredNames(MathExpression expr) {
		Map<String, String> symbolTable = new HashMap<>();
		Model root = EcoreUtil2.getContainerOfType(expr, Model.class);
		for (ConstDefinition constDef : root.getConstDefinitions()) {
			symbolTable.put (constDef.getVarName(), "CONST");
		}
		for (VarDefinition varDef : root.getVarDefinitions()) {
			symbolTable.put (varDef.getVarName(), "VAR");
		}
		for (ExpDefinition expDef : root.getExpDefinitions()) {
			symbolTable.put (expDef.getVarName(), "EXP");
		}
		if (expr.getVar() != null) {
			if (!symbolTable.containsKey(expr.getVar())) {
				error(UNDEFINED_NAME, expr, MExpPackage.Literals.MATH_EXPRESSION__VAR);
			}
		}
	}
	
}
