/*
 * generated by Xtext 2.27.0
 */
grammar InternalMExp;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package eu.fbk.se.mathexpeditor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.fbk.se.mathexpeditor.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.fbk.se.mathexpeditor.services.MExpGrammarAccess;

}

@parser::members {

 	private MExpGrammarAccess grammarAccess;

    public InternalMExpParser(TokenStream input, MExpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MExpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConstDefinitionsConstDefinitionParserRuleCall_0_0());
				}
				lv_constDefinitions_0_0=ruleConstDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"constDefinitions",
						lv_constDefinitions_0_0,
						"eu.fbk.se.mathexpeditor.MExp.ConstDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getVarDefinitionsVarDefinitionParserRuleCall_1_0());
				}
				lv_varDefinitions_1_0=ruleVarDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"varDefinitions",
						lv_varDefinitions_1_0,
						"eu.fbk.se.mathexpeditor.MExp.VarDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getExpDefinitionsExpDefinitionParserRuleCall_2_0());
				}
				lv_expDefinitions_2_0=ruleExpDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"expDefinitions",
						lv_expDefinitions_2_0,
						"eu.fbk.se.mathexpeditor.MExp.ExpDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstDefinition
entryRuleConstDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstDefinitionRule()); }
	iv_ruleConstDefinition=ruleConstDefinition
	{ $current=$iv_ruleConstDefinition.current; }
	EOF;

// Rule ConstDefinition
ruleConstDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstDefinitionAccess().getConstKeyword_0());
		}
		(
			(
				lv_varName_1_0=RULE_ID
				{
					newLeafNode(lv_varName_1_0, grammarAccess.getConstDefinitionAccess().getVarNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_COLON_2=RULE_COLON
		{
			newLeafNode(this_COLON_2, grammarAccess.getConstDefinitionAccess().getCOLONTerminalRuleCall_2());
		}
		(
			(
				lv_varValue_3_0=RULE_INT
				{
					newLeafNode(lv_varValue_3_0, grammarAccess.getConstDefinitionAccess().getVarValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"varValue",
						lv_varValue_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		this_SEMICOLON_4=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_4, grammarAccess.getConstDefinitionAccess().getSEMICOLONTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleVarDefinition
entryRuleVarDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDefinitionRule()); }
	iv_ruleVarDefinition=ruleVarDefinition
	{ $current=$iv_ruleVarDefinition.current; }
	EOF;

// Rule VarDefinition
ruleVarDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarDefinitionAccess().getVarKeyword_0());
		}
		(
			(
				lv_varName_1_0=RULE_ID
				{
					newLeafNode(lv_varName_1_0, grammarAccess.getVarDefinitionAccess().getVarNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_COLON_2=RULE_COLON
		{
			newLeafNode(this_COLON_2, grammarAccess.getVarDefinitionAccess().getCOLONTerminalRuleCall_2());
		}
		(
			(
				lv_varValue_3_0=RULE_INT
				{
					newLeafNode(lv_varValue_3_0, grammarAccess.getVarDefinitionAccess().getVarValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"varValue",
						lv_varValue_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		this_SEMICOLON_4=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_4, grammarAccess.getVarDefinitionAccess().getSEMICOLONTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleExpDefinition
entryRuleExpDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpDefinitionRule()); }
	iv_ruleExpDefinition=ruleExpDefinition
	{ $current=$iv_ruleExpDefinition.current; }
	EOF;

// Rule ExpDefinition
ruleExpDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Exp'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpDefinitionAccess().getExpKeyword_0());
		}
		(
			(
				lv_varName_1_0=RULE_ID
				{
					newLeafNode(lv_varName_1_0, grammarAccess.getExpDefinitionAccess().getVarNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_COLON_2=RULE_COLON
		{
			newLeafNode(this_COLON_2, grammarAccess.getExpDefinitionAccess().getCOLONTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpDefinitionAccess().getVarValueMathExpressionParserRuleCall_3_0());
				}
				lv_varValue_3_0=ruleMathExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpDefinitionRule());
					}
					set(
						$current,
						"varValue",
						lv_varValue_3_0,
						"eu.fbk.se.mathexpeditor.MExp.MathExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_SEMICOLON_4=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_4, grammarAccess.getExpDefinitionAccess().getSEMICOLONTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleMathExpression
entryRuleMathExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathExpressionRule()); }
	iv_ruleMathExpression=ruleMathExpression
	{ $current=$iv_ruleMathExpression.current; }
	EOF;

// Rule MathExpression
ruleMathExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMathExpressionAccess().getMathExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_const_1_0=RULE_INT
					{
						newLeafNode(lv_const_1_0, grammarAccess.getMathExpressionAccess().getConstINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMathExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"const",
							lv_const_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				lv_var_2_0=RULE_ID
				{
					newLeafNode(lv_var_2_0, grammarAccess.getMathExpressionAccess().getVarIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					(
						lv_var_3_0=RULE_ID
						{
							newLeafNode(lv_var_3_0, grammarAccess.getMathExpressionAccess().getVarIDTerminalRuleCall_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMathExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"var",
								lv_var_3_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				    |
				(
					(
						lv_const_4_0=RULE_INT
						{
							newLeafNode(lv_const_4_0, grammarAccess.getMathExpressionAccess().getConstINTTerminalRuleCall_2_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMathExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"const",
								lv_const_4_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)
			this_OPERATOR_5=RULE_OPERATOR
			{
				newLeafNode(this_OPERATOR_5, grammarAccess.getMathExpressionAccess().getOPERATORTerminalRuleCall_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMathExpressionAccess().getExp1MathExpressionParserRuleCall_2_2_0());
					}
					lv_exp1_6_0=ruleMathExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMathExpressionRule());
						}
						set(
							$current,
							"exp1",
							lv_exp1_6_0,
							"eu.fbk.se.mathexpeditor.MExp.MathExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			this_L_BRACKET_7=RULE_L_BRACKET
			{
				newLeafNode(this_L_BRACKET_7, grammarAccess.getMathExpressionAccess().getL_BRACKETTerminalRuleCall_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMathExpressionAccess().getExp2MathExpressionParserRuleCall_3_1_0());
					}
					lv_exp2_8_0=ruleMathExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMathExpressionRule());
						}
						set(
							$current,
							"exp2",
							lv_exp2_8_0,
							"eu.fbk.se.mathexpeditor.MExp.MathExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_R_BRACKET_9=RULE_R_BRACKET
			{
				newLeafNode(this_R_BRACKET_9, grammarAccess.getMathExpressionAccess().getR_BRACKETTerminalRuleCall_3_2());
			}
		)
	)
;

RULE_OPERATOR : ('+'|'-'|'x');

RULE_EQUAL : '=';

RULE_ASSIGN : ':=';

RULE_SEMICOLON : ';';

RULE_COLON : ':';

RULE_L_BRACKET : '(';

RULE_R_BRACKET : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
