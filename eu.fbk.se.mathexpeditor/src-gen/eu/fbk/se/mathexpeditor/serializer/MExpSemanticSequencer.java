/*
 * generated by Xtext 2.27.0.M3
 */
package eu.fbk.se.mathexpeditor.serializer;

import com.google.inject.Inject;
import eu.fbk.se.mathexpeditor.mExp.ConstDefinition;
import eu.fbk.se.mathexpeditor.mExp.ExpDefinition;
import eu.fbk.se.mathexpeditor.mExp.MExpPackage;
import eu.fbk.se.mathexpeditor.mExp.MathExpression;
import eu.fbk.se.mathexpeditor.mExp.Model;
import eu.fbk.se.mathexpeditor.mExp.VarDefinition;
import eu.fbk.se.mathexpeditor.services.MExpGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MExpSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MExpGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MExpPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MExpPackage.CONST_DEFINITION:
				sequence_ConstDefinition(context, (ConstDefinition) semanticObject); 
				return; 
			case MExpPackage.EXP_DEFINITION:
				sequence_ExpDefinition(context, (ExpDefinition) semanticObject); 
				return; 
			case MExpPackage.MATH_EXPRESSION:
				sequence_MathExpression(context, (MathExpression) semanticObject); 
				return; 
			case MExpPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MExpPackage.VAR_DEFINITION:
				sequence_VarDefinition(context, (VarDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConstDefinition returns ConstDefinition
	 *
	 * Constraint:
	 *     (varName=ID varValue=INT)
	 * </pre>
	 */
	protected void sequence_ConstDefinition(ISerializationContext context, ConstDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MExpPackage.Literals.CONST_DEFINITION__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MExpPackage.Literals.CONST_DEFINITION__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, MExpPackage.Literals.CONST_DEFINITION__VAR_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MExpPackage.Literals.CONST_DEFINITION__VAR_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstDefinitionAccess().getVarNameIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getConstDefinitionAccess().getVarValueINTTerminalRuleCall_3_0(), semanticObject.getVarValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpDefinition returns ExpDefinition
	 *
	 * Constraint:
	 *     (varName=ID varValue=MathExpression)
	 * </pre>
	 */
	protected void sequence_ExpDefinition(ISerializationContext context, ExpDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MExpPackage.Literals.EXP_DEFINITION__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MExpPackage.Literals.EXP_DEFINITION__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, MExpPackage.Literals.EXP_DEFINITION__VAR_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MExpPackage.Literals.EXP_DEFINITION__VAR_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpDefinitionAccess().getVarNameIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getExpDefinitionAccess().getVarValueMathExpressionParserRuleCall_3_0(), semanticObject.getVarValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MathExpression returns MathExpression
	 *
	 * Constraint:
	 *     (const=INT | var=ID | ((var=ID | const=INT) exp1=MathExpression) | exp2=MathExpression)
	 * </pre>
	 */
	protected void sequence_MathExpression(ISerializationContext context, MathExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         (constDefinitions+=ConstDefinition* varDefinitions+=VarDefinition+ expDefinitions+=ExpDefinition+) | 
	 *         (constDefinitions+=ConstDefinition* expDefinitions+=ExpDefinition+) | 
	 *         expDefinitions+=ExpDefinition+
	 *     )?
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VarDefinition returns VarDefinition
	 *
	 * Constraint:
	 *     (varName=ID varValue=INT)
	 * </pre>
	 */
	protected void sequence_VarDefinition(ISerializationContext context, VarDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MExpPackage.Literals.VAR_DEFINITION__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MExpPackage.Literals.VAR_DEFINITION__VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, MExpPackage.Literals.VAR_DEFINITION__VAR_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MExpPackage.Literals.VAR_DEFINITION__VAR_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarDefinitionAccess().getVarNameIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.accept(grammarAccess.getVarDefinitionAccess().getVarValueINTTerminalRuleCall_3_0(), semanticObject.getVarValue());
		feeder.finish();
	}
	
	
}
