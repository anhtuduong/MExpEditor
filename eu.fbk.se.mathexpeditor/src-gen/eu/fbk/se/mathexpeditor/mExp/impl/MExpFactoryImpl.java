/**
 * generated by Xtext 2.27.0
 */
package eu.fbk.se.mathexpeditor.mExp.impl;

import eu.fbk.se.mathexpeditor.mExp.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MExpFactoryImpl extends EFactoryImpl implements MExpFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MExpFactory init()
  {
    try
    {
      MExpFactory theMExpFactory = (MExpFactory)EPackage.Registry.INSTANCE.getEFactory(MExpPackage.eNS_URI);
      if (theMExpFactory != null)
      {
        return theMExpFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MExpFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MExpFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MExpPackage.MODEL: return createModel();
      case MExpPackage.CONST_DEFINITION: return createConstDefinition();
      case MExpPackage.VAR_DEFINITION: return createVarDefinition();
      case MExpPackage.EXP_DEFINITION: return createExpDefinition();
      case MExpPackage.MATH_EXPRESSION: return createMathExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstDefinition createConstDefinition()
  {
    ConstDefinitionImpl constDefinition = new ConstDefinitionImpl();
    return constDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDefinition createVarDefinition()
  {
    VarDefinitionImpl varDefinition = new VarDefinitionImpl();
    return varDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpDefinition createExpDefinition()
  {
    ExpDefinitionImpl expDefinition = new ExpDefinitionImpl();
    return expDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathExpression createMathExpression()
  {
    MathExpressionImpl mathExpression = new MathExpressionImpl();
    return mathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MExpPackage getMExpPackage()
  {
    return (MExpPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MExpPackage getPackage()
  {
    return MExpPackage.eINSTANCE;
  }

} //MExpFactoryImpl
