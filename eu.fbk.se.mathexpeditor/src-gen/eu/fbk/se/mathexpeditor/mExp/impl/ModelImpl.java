/**
 * generated by Xtext 2.27.0
 */
package eu.fbk.se.mathexpeditor.mExp.impl;

import eu.fbk.se.mathexpeditor.mExp.ConstDefinition;
import eu.fbk.se.mathexpeditor.mExp.ExpDefinition;
import eu.fbk.se.mathexpeditor.mExp.MExpPackage;
import eu.fbk.se.mathexpeditor.mExp.Model;
import eu.fbk.se.mathexpeditor.mExp.VarDefinition;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link eu.fbk.se.mathexpeditor.mExp.impl.ModelImpl#getConstDefinitions <em>Const Definitions</em>}</li>
 *   <li>{@link eu.fbk.se.mathexpeditor.mExp.impl.ModelImpl#getVarDefinitions <em>Var Definitions</em>}</li>
 *   <li>{@link eu.fbk.se.mathexpeditor.mExp.impl.ModelImpl#getExpDefinitions <em>Exp Definitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getConstDefinitions() <em>Const Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstDefinitions()
   * @generated
   * @ordered
   */
  protected EList<ConstDefinition> constDefinitions;

  /**
   * The cached value of the '{@link #getVarDefinitions() <em>Var Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarDefinitions()
   * @generated
   * @ordered
   */
  protected EList<VarDefinition> varDefinitions;

  /**
   * The cached value of the '{@link #getExpDefinitions() <em>Exp Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpDefinitions()
   * @generated
   * @ordered
   */
  protected EList<ExpDefinition> expDefinitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MExpPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConstDefinition> getConstDefinitions()
  {
    if (constDefinitions == null)
    {
      constDefinitions = new EObjectContainmentEList<ConstDefinition>(ConstDefinition.class, this, MExpPackage.MODEL__CONST_DEFINITIONS);
    }
    return constDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarDefinition> getVarDefinitions()
  {
    if (varDefinitions == null)
    {
      varDefinitions = new EObjectContainmentEList<VarDefinition>(VarDefinition.class, this, MExpPackage.MODEL__VAR_DEFINITIONS);
    }
    return varDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExpDefinition> getExpDefinitions()
  {
    if (expDefinitions == null)
    {
      expDefinitions = new EObjectContainmentEList<ExpDefinition>(ExpDefinition.class, this, MExpPackage.MODEL__EXP_DEFINITIONS);
    }
    return expDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MExpPackage.MODEL__CONST_DEFINITIONS:
        return ((InternalEList<?>)getConstDefinitions()).basicRemove(otherEnd, msgs);
      case MExpPackage.MODEL__VAR_DEFINITIONS:
        return ((InternalEList<?>)getVarDefinitions()).basicRemove(otherEnd, msgs);
      case MExpPackage.MODEL__EXP_DEFINITIONS:
        return ((InternalEList<?>)getExpDefinitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MExpPackage.MODEL__CONST_DEFINITIONS:
        return getConstDefinitions();
      case MExpPackage.MODEL__VAR_DEFINITIONS:
        return getVarDefinitions();
      case MExpPackage.MODEL__EXP_DEFINITIONS:
        return getExpDefinitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MExpPackage.MODEL__CONST_DEFINITIONS:
        getConstDefinitions().clear();
        getConstDefinitions().addAll((Collection<? extends ConstDefinition>)newValue);
        return;
      case MExpPackage.MODEL__VAR_DEFINITIONS:
        getVarDefinitions().clear();
        getVarDefinitions().addAll((Collection<? extends VarDefinition>)newValue);
        return;
      case MExpPackage.MODEL__EXP_DEFINITIONS:
        getExpDefinitions().clear();
        getExpDefinitions().addAll((Collection<? extends ExpDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MExpPackage.MODEL__CONST_DEFINITIONS:
        getConstDefinitions().clear();
        return;
      case MExpPackage.MODEL__VAR_DEFINITIONS:
        getVarDefinitions().clear();
        return;
      case MExpPackage.MODEL__EXP_DEFINITIONS:
        getExpDefinitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MExpPackage.MODEL__CONST_DEFINITIONS:
        return constDefinitions != null && !constDefinitions.isEmpty();
      case MExpPackage.MODEL__VAR_DEFINITIONS:
        return varDefinitions != null && !varDefinitions.isEmpty();
      case MExpPackage.MODEL__EXP_DEFINITIONS:
        return expDefinitions != null && !expDefinitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
